// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  avatar    String?
  provider  String   @default("google")
  providerId String?
  stripeCustomerId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  subscriptions Subscription[]
  paymentMethods PaymentMethod[]
  files File[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String   @id @default(cuid())
  stripeProductId String @unique
  name        String
  description String?
  metadata    Json?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  prices Price[]

  @@map("products")
}

model Price {
  id            String   @id @default(cuid())
  stripePriceId String   @unique
  productId     String
  nickname      String?
  currency      String
  type          PriceType
  unitAmount    Int?
  interval      PriceInterval?
  intervalCount Int?
  trialPeriodDays Int?
  metadata      Json?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]

  @@map("prices")
}

model Subscription {
  id                String             @id @default(cuid())
  stripeSubscriptionId String          @unique
  userId            String
  priceId           String
  status            SubscriptionStatus
  metadata          Json?
  cancelAtPeriodEnd Boolean            @default(false)
  cancelAt          DateTime?
  canceledAt        DateTime?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  endedAt           DateTime?
  trialStart        DateTime?
  trialEnd          DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  price Price @relation(fields: [priceId], references: [id])

  @@map("subscriptions")
}

model PaymentMethod {
  id                String   @id @default(cuid())
  stripePaymentMethodId String @unique
  userId            String
  type              String
  last4             String?
  brand             String?
  expiryMonth       Int?
  expiryYear        Int?
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  stripeEventId String @unique
  type        String
  processed   Boolean  @default(false)
  data        Json
  createdAt   DateTime @default(now())
  processedAt DateTime?

  @@map("webhook_events")
}

model File {
  id          String   @id @default(cuid())
  fileName    String
  originalName String
  mimeType    String
  fileSize    Int
  url         String
  key         String   @unique // S3 object key
  bucket      String   @default("uploads")
  isPublic    Boolean  @default(true)
  userId      String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("files")
}

enum PriceType {
  ONE_TIME
  RECURRING
}

enum PriceInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
}
